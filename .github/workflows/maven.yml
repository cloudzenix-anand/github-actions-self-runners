# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: project cicd flow 

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build: 
  
    runs-on: ubuntu-latest 

    steps:
    - uses: actions/checkout@v2
    - name: Step:1 Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: '1.8'
        distribution: 'adopt'
        cache: maven
    - name: Step:2 Build source code into jar file with Maven
      run: |
           mvn -B package --file pom.xml
           mkdir artifacts && cp target/*.jar artifacts
           cd artifacts && ls
    - name: Step:3 Saving the artifact 
      uses: actions/upload-artifact@v2
      with:
        name: Saving the artifact
        path: artifacts
        
    - name: Step:4 Setting up Jfrog-CLI
      uses: jfrog/setup-jfrog-cli@v2
      #run: jf --version
    - name: Step:5 Pushing the maven artifact to Jfrog repository
      run: |
         jf rt upload artifacts/cz-springboot-welcome.jar maven-demo --url=https://cloudzenix.jfrog.io/artifactory/ --user=renuka.prasad@cloudzenix.com --password=Prasad@123
         jf rt build-publish gitaction --buildname=$BUILD_NUMBER --url=https://cloudzenix.jfrog.io/artifactory/ --user=renuka.prasad@cloudzenix.com --password=Prasad@123
         jf rt bs gitaction --buildname=$BUILD_NUMBER --url=https://cloudzenix.jfrog.io/artifactory/ --user=renuka.prasad@cloudzenix.com --password=Prasad@123 --fail=false
#  docker-image-to-Jfrog:
  
#    runs-on: self-hosted
#    steps:
    - name: Step:6 Build & Push Docker image to JFrog-Artifact repo
      run: |
        docker login -urenuka.prasad@cloudzenix.com -p Prasad@123 cloudzenix.jfrog.io
        docker build -t cloudzenix.jfrog.io/docker-repo/cz-springboot-welcome:latest1 .
        docker push cloudzenix.jfrog.io/docker-repo/cz-springboot-welcome:latest1
#        docker build -t ${{ secrets.DOCKER_USERNAME }}/cz-springboot-welcome:latest .
#        docker push ${{ secrets.DOCKER_USERNAME }}/cz-springboot-welcome:latest
   
    - name: Step:7 Build & push Docker image to Docker-Hub          
      uses: mr-smithers-excellent/docker-build-push@v5
      with:
        image: cloudzenix/cz-springboot-welcome
        tags: today
        registry: docker.io
        dockerfile: Dockerfile
        username: ${{ secrets.DOCKER_USERNAME }} 
        password: ${{ secrets.DOCKER_PASSWORD }}
    


     
